// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  accounts      Account[]
  sessions      Session[]

  // Football platform specific fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User profile
  phone         String?
  location      String?
  bio           String?
  skillLevel    SkillLevel @default(BEGINNER)
  
  // Relations
  organizedGames Game[]    @relation("GameOrganizer")
  gameSignups    GameSignup[]
  payments       Payment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Football platform models
model Game {
  id          String   @id @default(cuid())
  title       String
  description String?
  
  // Game details
  date        DateTime
  duration    Int      // in minutes
  location    String
  latitude    Float?
  longitude   Float?
  
  // Capacity and pricing
  maxPlayers  Int
  currentPlayers Int   @default(0)
  pricePerPlayer Decimal @db.Money
  
  // Game configuration
  gameType    GameType
  skillLevel  SkillLevel
  isPublic    Boolean  @default(true)
  
  // Organizer
  organizerId String
  organizer   User     @relation("GameOrganizer", fields: [organizerId], references: [id])
  
  // Status and timestamps
  status      GameStatus @default(OPEN)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  signups     GameSignup[]
  payments    Payment[]
}

model GameSignup {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  status    SignupStatus @default(PENDING_PAYMENT)
  position  Int?     // Position in waitlist if applicable
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])
  game      Game     @relation(fields: [gameId], references: [id])
  
  @@unique([userId, gameId])
}

model Payment {
  id            String    @id @default(cuid())
  userId        String
  gameId        String
  amount        Decimal   @db.Money
  currency      String    @default("usd")
  
  // Stripe details
  stripePaymentIntentId String? @unique
  stripeStatus         String?
  
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user          User          @relation(fields: [userId], references: [id])
  game          Game          @relation(fields: [gameId], references: [id])
}

// Enums
enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum GameType {
  CASUAL
  COMPETITIVE
  PICKUP
  TOURNAMENT
}

enum GameStatus {
  OPEN
  FULL
  CANCELLED
  COMPLETED
}

enum SignupStatus {
  PENDING_PAYMENT
  CONFIRMED
  WAITLISTED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
